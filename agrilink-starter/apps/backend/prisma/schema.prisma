generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  role          String         // FARMER | BUYER | INSPECTOR | ADMIN
  password      String
  createdAt     DateTime       @default(now())
  farms         Farm[]
  sessions      Session[]
  qaInspections QaInspection[]
}

model Farm {
  id           String        @id @default(cuid())
  name         String
  district     String?
  owner        User          @relation(fields: [ownerId], references: [id])
  ownerId      String
  lots         Lot[]
  certificates Certificate[]
  createdAt    DateTime      @default(now())
}

model Lot {
  id            String          @id @default(cuid())
  publicId      String          @unique
  farm          Farm            @relation(fields: [farmId], references: [id])
  farmId        String
  produce       String
  events        Event[]
  shipments     Shipment[]
  sensorDevices SensorDevice[]
  qaInspections QaInspection[]
  certificates  Certificate[]
  createdAt     DateTime        @default(now())
}

model Event {
  id    String   @id @default(cuid())
  lot   Lot      @relation(fields: [lotId], references: [id])
  lotId String
  type  String
  note  String?
  temp  Float?
  hum   Float?
  at    DateTime @default(now())
  place String?
}

model Shipment {
  id        String   @id @default(cuid())
  lot       Lot      @relation(fields: [lotId], references: [id])
  lotId     String
  status    String
  route     String?
  createdAt DateTime @default(now())
}

model Session {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
}

model SensorDevice {
  id         String   @id @default(cuid())
  name       String
  apiKeyHash String   @unique
  boundLotId String?
  boundLot   Lot?     @relation(fields: [boundLotId], references: [id])
  createdAt  DateTime @default(now())
}

model QaInspection {
  id          String   @id @default(cuid())
  lot         Lot      @relation(fields: [lotId], references: [id])
  lotId       String
  inspector   User     @relation(fields: [inspectorId], references: [id])
  inspectorId String
  defects     Int      @default(0)
  grade       String   // A, B, C, REJECT
  notes       String?
  images      String?  // JSON array of image URLs
  createdAt   DateTime @default(now())
}

model Certificate {
  id        String    @id @default(cuid())
  farm      Farm      @relation(fields: [farmId], references: [id])
  farmId    String
  lot       Lot?      @relation(fields: [lotId], references: [id])
  lotId     String?
  type      String    // GAP, ORGANIC, AGRILINK_CERTIFIED, etc.
  issuer    String
  fileUrl   String
  issuedAt  DateTime
  expiresAt DateTime?
  createdAt DateTime  @default(now())
}
